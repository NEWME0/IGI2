//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: IGI2_THM.bt
//   Authors: Rotari Artiom
//   Version: 1.0
//   Purpose: 
//  Category: Game
// File Mask: 
//  ID BYTEs: 
//   History: 
//------------------------------------------------

#define PIXEL_SIZE 4

struct
{
    struct
    {
        LittleEndian();
        UINT32 _1; Assert(_1 == 1008981770);
        UINT32 creations_year;
        UINT32 creations_month;
        UINT32 creations_day;
        UINT32 creations_hour;
        UINT32 creations_minute;
        UINT32 creations_second;
        UINT32 creations_milisecond;
        UINT32 _2; Assert(_2 == 2);
        UINT32 _3; Assert(_3 == 0);
        UINT32 _4; Assert(_4 == 1065353216);
        UINT32 resolution_x;
        UINT32 resolution_y;
    } header;

    struct
    {
        if(!FEof())
            FLOAT lod_0[(header.resolution_x / (1 << 0)) * (header.resolution_y / (1 << 0))];

        if(!FEof())
            BYTE lod_1[(header.resolution_x / (1 << 1)) * (header.resolution_y / (1 << 1)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_2[(header.resolution_x / (1 << 2)) * (header.resolution_y / (1 << 2)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_3[(header.resolution_x / (1 << 3)) * (header.resolution_y / (1 << 3)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_4[(header.resolution_x / (1 << 4)) * (header.resolution_y / (1 << 4)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_5[(header.resolution_x / (1 << 5)) * (header.resolution_y / (1 << 5)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_6[(header.resolution_x / (1 << 6)) * (header.resolution_y / (1 << 6)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_7[(header.resolution_x / (1 << 7)) * (header.resolution_y / (1 << 7)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_8[(header.resolution_x / (1 << 8)) * (header.resolution_y / (1 << 8)) * PIXEL_SIZE];
    } lods;
} IGI2_THM;

Assert(FEof());

//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: IGI2_TMM.bt
//   Authors: Rotari Artiom
//   Version: 1.0
//   Purpose: 
//  Category: Game
// File Mask: 
//  ID BYTEs: 
//   History: 
//------------------------------------------------


#define PIXEL_SIZE 1

#include "COMMON/DATETIME.bt";


struct
{
    struct
    {
        LittleEndian();

        UINT32    _1;
        DATETIME  DateTime;
        UINT32    _2;
        UINT32    resolution_x;
        UINT32    resolution_y;
    } header;

    struct
    {
        if(!FEof())
            BYTE lod_0[(header.resolution_x / (1 << 0)) * (header.resolution_y / (1 << 0)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_1[(header.resolution_x / (1 << 1)) * (header.resolution_y / (1 << 1)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_2[(header.resolution_x / (1 << 2)) * (header.resolution_y / (1 << 2)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_3[(header.resolution_x / (1 << 3)) * (header.resolution_y / (1 << 3)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_4[(header.resolution_x / (1 << 4)) * (header.resolution_y / (1 << 4)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_5[(header.resolution_x / (1 << 5)) * (header.resolution_y / (1 << 5)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_6[(header.resolution_x / (1 << 6)) * (header.resolution_y / (1 << 6)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_7[(header.resolution_x / (1 << 7)) * (header.resolution_y / (1 << 7)) * PIXEL_SIZE];

        if(!FEof())
            BYTE lod_8[(header.resolution_x / (1 << 8)) * (header.resolution_y / (1 << 8)) * PIXEL_SIZE];
    } lods;
} IGI2_TMM;


Assert(FEof());

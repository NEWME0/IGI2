//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: IGI2_SPR.bt
//   Authors: Rotari Artiom
//   Version: 1.0
//   Purpose: 
//  Category: Game
// File Mask: LOOP
//  ID BYTEs: 
//   History: 
//------------------------------------------------



LittleEndian();


typedef struct LOOP_HEADER
{
    CHAR   signature[4]; // LOOP
    UINT32 version;      // {7, 9}
    UINT32 _0;           // version9 0;      version7 2880154539
    UINT32 _1;           // version9 0;      version7 2880154539
    UINT32 _2;           // version9 327680; version7 0
    UINT32 _3;           // 0
    UINT32 _4;           // 0
    UINT32 tail_offset;
    UINT32 spr_count;
    UINT32 _6;           // version9 0; version7 2880154539
    UINT32 width;
    UINT32 height;
    UINT32 mode;         // {2: ARGB_1555, 3: ARGB_8888}
};


typedef struct SPR_HEADER_VERSION_7
{
    UINT32 spr_bitmap_offset;
    UINT32 line_width;
    UINT16 width;
    UINT16 _0;                 // 0
    UINT16 height;
    UINT16 _1;                 // 0
    UINT32 _2;                 // 0
    UINT32 _3;                 // 0
    UINT32 _4;                 // 0
    UINT32 _5;                 // 0
    UINT32 _6;                 // 0
    UINT32 _7;                 // 0
};


typedef struct SPR_HEADER_VERSION_9
{
    UINT32 spr_bitmap_offset;
    UINT32 mode;
    UINT16 line_width;
    UINT16 width;
    UINT16 height;
    UINT16 _0;                 // (0, 1, 64) 1 blood1.spr, h_scamera
    UINT32 _1;                 // 0
    UINT32 _2;                 // 0
    UINT32 _3;                 // 0
    UINT32 _4;                 // 0
};


typedef struct SPR_BITMAP(UINT32 width, UINT32 height, UINT32 depth)
{
    BYTE bitmap[width * height * depth];
};


typedef struct LOOP_TAIL
{
    CHAR   signature[4]; // LOOP
    UINT32 _1;
    UINT32 _2;
    UINT32 _3;
    UINT32 _4;
    UINT32 _5;

    struct
    {
        UINT32 _1;
        UINT32 _2;
        UINT32 _3;
        UINT32 _4;
    } unk[igi2_spr.header.spr_count];
};


struct
{
    LOOP_HEADER header;

    switch(header.version)
    {
        case 7: SPR_HEADER_VERSION_7 spr_header[header.spr_count]; break;
        case 9: SPR_HEADER_VERSION_9 spr_header[header.spr_count]; break;
    }

    local long i = 0;

    for(i = 0; i < header.spr_count; i++)
    {
        SPR_BITMAP spr_bitmap(spr_header[i].width, spr_header[i].height, 4);
    }

    LOOP_TAIL tail;
} igi2_spr;


Assert(FEof(), "Parsing error: expected end of file");
